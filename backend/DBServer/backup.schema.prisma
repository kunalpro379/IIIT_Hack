generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authority 
model Authority {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  role           RoleType
  assignedRegion String
  createdAt      DateTime  @default(now())
  departments    Department[]
  panchayats     Panchayat[]
  blockOfficers  BlockOfficer[]
  nagarSevaks    NagarSevak[]
  parentAuthority     Authority?  @relation("AuthorityHierarchy", fields: [parentAuthorityId], references: [id])
  parentAuthorityId   String?
  childAuthorities    Authority[] @relation("AuthorityHierarchy")
  level              String      // To store hierarchical level: "TOP", "MID", "OPERATIONAL"
}

model Department {
  id                 String   @id @default(cuid())  // This will be the only ID field
  departmentName     String   
  description        String?
  departmentOfficers DepartmentOfficer[]
  issues             Issue[]
  timestamp          DateTime @default(now())
  announcements      Announcement[] 
  feedbacks          Feedback[]        @relation("DepartmentFeedbacks")
  communications     Communication[]
  workers            Worker[]
  resourceId         String?
  authorityId        String
  authority          Authority @relation(fields: [authorityId], references: [id])
  grievances         Grievance[] 
  hierarchyLevel     String     // To indicate department's position in hierarchy
  parentDepartment   Department? @relation("DepartmentHierarchy", fields: [parentDeptId], references: [id])
  parentDeptId       String?
  childDepartments   Department[] @relation("DepartmentHierarchy")
}

model DistrictMagistrate {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  timeStamp          DateTime @default(now())
  departmentOfficers Json
  workers            Json
  announcements      Announcement[]  @relation("DistrictMagistrateAnnouncements")
  communications     Communication[] @relation("DistrictMagistrateCommunications")
}

model Panchayat {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  timeStamp          DateTime @default(now())
  departmentOfficers Json
  workers            Json
  announcements      Announcement[]  @relation("PanchayatAnnouncements")
  communications     Communication[] @relation("PanchayatCommunications")
  authority          Authority       @relation(fields: [authorityId], references: [id])
  authorityId        String
  blockOfficers      BlockOfficer[]
}

model BlockOfficer {
  id           String    @id @default(cuid())
  name         String
  panchayatId  String
  panchayat    Panchayat @relation(fields: [panchayatId], references: [id])
  authority    Authority @relation(fields: [authorityId], references: [id])
  authorityId  String
}

model NagarSevak {
  id           String    @id @default(cuid())
  name         String
  authorityId  String
  authority    Authority @relation(fields: [authorityId], references: [id])
}

model Communication {
  id                  String             @id @default(cuid())
  senderId            String
  receiverId          String
  message             String
  timestamp           DateTime           @default(now())
  attachments         Json?
  department          Department         @relation(fields: [senderId], references: [id], map: "Communication_senderId_fkey")
  districtMagistrate  DistrictMagistrate? @relation("DistrictMagistrateCommunications", fields: [receiverId], references: [id], map: "Communication_dmReceiverId_fkey")
  panchayat           Panchayat?          @relation("PanchayatCommunications", fields: [receiverId], references: [id], map: "Communication_panchayatReceiverId_fkey")
}

model Announcement {
  id                  String             @id @default(cuid())
  announceForRole     RoleType[]        // Changed from audienceRoleIds
  description         String
  attachments         Json?
  title              String
  channels           String[]
  comments           Json?
  citizenReactions   Json?
  department         Department          @relation(fields: [id], references: [id], map: "Announcement_departmentId_fkey")
  districtMagistrate DistrictMagistrate? @relation("DistrictMagistrateAnnouncements", fields: [id], references: [id], map: "Announcement_dmId_fkey")
  panchayat          Panchayat?          @relation("PanchayatAnnouncements", fields: [id], references: [id], map: "Announcement_panchayatId_fkey")
}

// Citizen 
model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  name               String
  password           String
  role               RoleType           @default(CITIZEN)
  grievances         Grievance[]
  feedbacks          Feedback[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
//  worker             Worker?            // One-to-one relation with Worker
//  departmentOfficer  DepartmentOfficer? // One-to-one relation with DepartmentOfficer
}

model Worker {
  id              String     @id @default(cuid())
  email           String     @unique
  name            String     // Added field
  age             Int?       // Added field
  gender          String?    // Added field
  address         String?    // Added field
  departmentId    String
  department      Department @relation(fields: [departmentId], references: [id])
  position        String
  dateJoined      DateTime
  contactNumber   String
  emergencyContact String?   // Added field
  bloodGroup      String?    // Added field
  aadharNumber    String?    // Added field
}

model DepartmentOfficer {
  id              String     @id @default(cuid())
  email           String     @unique
  name            String     // Added field
  age             Int?       // Added field
  gender          String?    // Added field
  address         String?    // Added field
  departmentId    String
  department      Department @relation(fields: [departmentId], references: [id])
  rank            String
  dateAssigned    DateTime
  contactNumber   String
  emergencyContact String?   // Added field
  bloodGroup      String?    // Added field
  aadharNumber    String?    // Added field
  qualification   String?    // Added field
  specialization  String?    // Added field
}

model Grievance {
  id                    String      @id @default(cuid())
  title                 String
  complaint             String?     // Added for complaint text
  complaintType         String
  categorySubcategory   String
  status               GrievanceStatus @default(PENDING)
  urgencyLevel         UrgencyLevel @default(MEDIUM)
  priorityLevel        PriorityLevel @default(MEDIUM)
  isAnonymous          Boolean     @default(false)
  emailId              String
  economicImpact       String?
  socialImpact         String?
  envImpact            String?     // For environmentalImpact
  emotion              String?
  estimated            Int?        // Added for estimated field
  ResolutionTime       Int?        // Added for resolution time
  relatedPolicies      String?     // Added for related policies
  timestamp            DateTime    @default(now())
  lastUpdatedDate      DateTime?   // Added for last updated
  submissionDate       DateTime?   // Added for submission date
  contactNumber        String?     // Added for contact number
  currentLevel        String     // To track at which authority level the grievance is
  escalationHistory   Json?      // To store escalation history with timestamps
  assignedAuthorities Json?      // To store all authorities involved
  resolutionPath     String[]   // To track resolution flow through hierarchy
  
  // Relations
  user                 User        @relation(fields: [userId], references: [id])
  userId               String
  department           Department  @relation(fields: [departmentId], references: [id])
  departmentId         String
  location            Location    @relation(fields: [locationId], references: [id])
  locationId          String

  feedbacks            Feedback[]

  @@map("grievances")
}

model Location {
  id                      String      @id @default(cuid())
  gpsCoordinatesLongitude Float?
  gpsCoordinatesLatitude  Float?
  location                String
  tehsil                  String?
  pincode                 String
  district                String
  ward                    String?
  grievances              Grievance[]
}

model Feedback {
  id          String    @id @default(cuid())
  citizenId   String
  citizen     User      @relation(fields: [citizenId], references: [id])
  grievanceId String
  grievance   Grievance @relation(fields: [grievanceId], references: [id])
  departmentId String?
  department  Department? @relation("DepartmentFeedbacks", fields: [departmentId], references: [id])
  ratings     Int
  comment     String?
  createdAt   DateTime  @default(now())
}

// Issues Models
model Issue {
  id            String           @id @default(cuid())
  grievanceIds  String[]
  summary       String
  category      String
  subcategory   String
  urgencyLevel  UrgencyLevel
  progress      ProgressStatus
  timeline      IssueTimeLine?
  attachments   IssueAttachment[]
  notifications Notification[]
  departmentId  String
  department    Department       @relation(fields: [departmentId], references: [id])
  hierarchyLevel     String
  escalationPath     String[]
  resolvedByLevel    String?
}

model IssueTimeLine {
  id                 String  @id @default(cuid())
  issueId            String  @unique
  issue              Issue   @relation(fields: [issueId], references: [id])
  reportedDate       DateTime @default(now())
  actionStartedDate  DateTime?
  resolutionDate     DateTime?
  totalDaysToResolve Int?
}

model IssueAttachment {
  id             String   @id @default(cuid())
  mediaId        String   @unique
  issueId        String
  issue          Issue    @relation(fields: [issueId], references: [id])
  uploadedBy     String
  mediaUrl       String
  timestampTaken DateTime
  isVerified     Boolean  @default(false)
  uploadedAt     DateTime @default(now())
}

model Notification {
  id             String         @id @default(cuid())
  notificationId String         @unique
  citizenId      String
  issueId        String
  issue          Issue          @relation(fields: [issueId], references: [id])
  isSerious      Boolean        @default(false)
  isRead         Boolean        @default(false)
  createdAt      DateTime       @default(now())
  priorityLevel  PriorityLevel
  title          String
}

// Enums
enum RoleType {
  // Top-Level Authorities
  DISTRICT_MAGISTRATE    // DM level
  COMMISSIONER          // Authority level
  ADMINISTRATOR         // Authority level
  
  // Mid-Level Management
  DEPARTMENT_HEAD       // Department management
  BLOCK_OFFICER        // Block level
  NAGAR_SEVAK          // Municipal level
  
  // Operational Level
  DEPARTMENT_OFFICER   // Department specific
  PANCHAYAT_OFFICER   // Village level
  WORKER              // Field staff
  
  // Other existing roles
  ADMIN
  FIELD_OFFICER
  PANCHAYAT
  CITIZEN
}

enum GrievanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum ProgressStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}